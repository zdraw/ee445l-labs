*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  /*
    2:    Initiating ADC Conversion:
    3:      1. Writing to ATD0CTL5
    4:      2. Edge on external trigger
    5:      3. Level on external trigger
    6:    
    7:    Completed Conversion
    8:      1. Reading ATD0STAT1
    9:      2. Interrupt when complete
   10:  */
   11:  
   12:  #include <hidef.h>      /* common defines and macros */
   13:  #include <mc9s12dp512.h>     /* derivative information */
   14:  #pragma LINK_INFO DERIVATIVE "mc9s12dp512"
   15:                
   16:  #define PROCEDURE 1
   17:  #include "PLL.h"
   18:  #include "ADC.h"
   19:  #include "OC.h"
   20:  #include "lcd.h"
   21:  #include "temperature.h"
   22:  #include <stdio.h>
   23:  
   24:  #if PROCEDURE == 1
   25:  #include "SCI0.h"
   26:  
   27:  unsigned short DataBuffer[100];
   28:  unsigned short Count=0;
   29:  void back(void) {
*** EVALUATION ***

Function: back
Source  : C:\Users\Raz\Documents\EE 445L\Lab7\Sources\main.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab7;C:\Users\Raz\Documents\EE 445L\Lab7\bin;C:\Users\Raz\Documents\EE 445L\Lab7\prm;C:\Users\Raz\Documents\EE 445L\Lab7\cmd;C:\Users\Raz\Documents\EE 445L\Lab7\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab7\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab7\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab7\Lab7_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

   30:    unsigned short data;
   31:    if(Count<100) {
  0000 fc0000       [3]     LDD   Count
  0003 8c0064       [2]     CPD   #100
  0006 2418         [3/1]   BCC   *+26 ;abs = 0020
   32:      data = ADC0_In(0x80); // your program that samples channel 5
  0008 c680         [1]     LDAB  #128
  000a 160000       [4]     JSR   ADC0_In
   33:      DataBuffer[Count++] = data;
  000d fe0000       [3]     LDX   Count
  0010 1901         [2]     LEAY  1,X
  0012 7d0000       [3]     STY   Count
  0015 b746         [1]     TFR   D,Y
  0017 b754         [1]     TFR   X,D
  0019 59           [1]     LSLD  
  001a b745         [1]     TFR   D,X
  001c 6de20000     [3]     STY   DataBuffer,X
   34:    }
   35:  }
  0020 3d           [5]     RTS   
   36:  void main(void){unsigned short i;
*** EVALUATION ***

Function: main
Source  : C:\Users\Raz\Documents\EE 445L\Lab7\Sources\main.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab7;C:\Users\Raz\Documents\EE 445L\Lab7\bin;C:\Users\Raz\Documents\EE 445L\Lab7\prm;C:\Users\Raz\Documents\EE 445L\Lab7\cmd;C:\Users\Raz\Documents\EE 445L\Lab7\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab7\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab7\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab7\Lab7_Data\Standard\ObjectCode\main.c.o" -WmsgSd1106

  0000 3b           [2]     PSHD  
   37:    PLL_Init(); // 24 MHz
  0001 160000       [4]     JSR   PLL_Init
   38:    ADC0_Init(); // your module
  0004 160000       [4]     JSR   ADC0_Init
   39:    SCI0_Init(115200); // SCI output to PC
  0007 86c2         [1]     LDAA  #194
  0009 c7           [1]     CLRB  
  000a ce0001       [2]     LDX   #1
  000d 160000       [4]     JSR   SCI0_Init
   40:    OC0_Init(1000,&back); // your module sampling at 1000 Hz
  0010 cc03e8       [2]     LDD   #1000
  0013 3b           [2]     PSHD  
  0014 cc0000       [2]     LDD   #back
  0017 160000       [4]     JSR   OC0_Init
  001a 1b82         [2]     LEAS  2,SP
   41:     
   42:    asm cli;
  001c 10ef         [1]     CLI   
   43:    while(Count<100) {}; // copy ADC to buffer in background
  001e fc0000       [3]     LDD   Count
  0021 8c0064       [2]     CPD   #100
  0024 25f8         [3/1]   BCS   *-6 ;abs = 001e
   44:    for(i=0; i<100; i++) {
  0026 c7           [1]     CLRB  
  0027 87           [1]     CLRA  
  0028 6c80         [2]     STD   0,SP
   45:      SCI0_OutUDec(DataBuffer[i]); SCI0_OutChar(10);SCI0_OutChar(13);
  002a ec80         [3]     LDD   0,SP
  002c 59           [1]     LSLD  
  002d b745         [1]     TFR   D,X
  002f ece20000     [4]     LDD   DataBuffer,X
  0033 160000       [4]     JSR   SCI0_OutUDec
  0036 c60a         [1]     LDAB  #10
  0038 160000       [4]     JSR   SCI0_OutChar
  003b c60d         [1]     LDAB  #13
  003d 160000       [4]     JSR   SCI0_OutChar
  0040 ee80         [3]     LDX   0,SP
  0042 08           [1]     INX   
  0043 6e80         [2]     STX   0,SP
  0045 8e0064       [2]     CPX   #100
  0048 25e0         [3/1]   BCS   *-30 ;abs = 002a
   46:    }
   47:    for(;;){};
  004a 20fe         [3]     BRA   *+0 ;abs = 004a
   48:  }
   49:  
   50:  #else
   51:  #include "FIFO.h"
   52:  
   53:  void getData(void) {
   54:    unsigned short data;
   55:    data = ADC0_In(0x82);
   56:    while(!Fifo_Put(data)) {}    
   57:  }
   58:  
   59:  void main(void) {
   60:    char buffer[10] = "";
   61:    // Initialize needed modules  
   62:    DDRP |= 0x80;
   63:    PLL_Init();
   64:    Fifo_Init();
   65:    ADC0_Init();
   66:    OC0_Init(100, &getData); 
   67:    LCD_Open();
   68:    
   69:    LCD_Clear();
   70:    sprintf(buffer, "     %cC", 223);
   71:    LCD_OutString(buffer);
   72:    
   73:    asm cli
   74:    
   75:    for(;;) {
   76:      unsigned short data;
   77:      unsigned short temperature;
   78:      while(!Fifo_Get(&data)) {}
   79:      
   80:      temperature = Temp_Data(data);
   81:      sprintf(buffer, "%2d.%02d", temperature/100, temperature%100);
   82:      //sprintf(buffer, "%4d", data);
   83:      LCD_GoTo(0,0);
   84:      LCD_OutString(buffer);
   85:                                   
   86:    }
   87:  }
   88:  #endif
