*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  // filename  ***************  LCD.C ****************************** 
    2:  // LCD Display (HD44780) on Port H for the 9S12DP512   
    3:  // Jonathan W. Valvano 9/18/09
    4:  
    5:  //  This example accompanies the books
    6:  //   "Embedded Microcomputer Systems: Real Time Interfacing",
    7:  //        Thompson, copyright (c) 2006,
    8:  //   "Introduction to Embedded Systems: Interfacing to the Freescale 9S12",
    9:  //        Cengage Publishing 2009, ISBN-10: 049541137X | ISBN-13: 9780495411376
   10:  
   11:  // Copyright 2009 by Jonathan W. Valvano, valvano@mail.utexas.edu 
   12:  //    You may use, edit, run or distribute this file 
   13:  //    as long as the above copyright notice remains 
   14:  
   15:  /*   
   16:    size is 1*16 
   17:    if do not need to read busy, then you can tie R/W=ground 
   18:    ground = pin 1    Vss
   19:    power  = pin 2    Vdd   +5V
   20:    ground = pin 3    Vlc   grounded for highest contrast
   21:    PH4    = pin 4    RS    (1 for data, 0 for control/status)
   22:    PH5    = pin 5    R/W   (1 for read, 0 for write)
   23:    PH6    = pin 6    E     (enable)
   24:    PH3    = pin 14   DB7   (4-bit data)
   25:    PH2    = pin 13   DB6
   26:    PH1    = pin 12   DB5
   27:    PH0    = pin 11   DB4
   28:  16 characters are configured as 2 rows of 8
   29:  addr  00 01 02 03 04 05 06 07 40 41 42 43 44 45 46 47
   30:  */
   31:  
   32:  #include <mc9s12dp512.h>     /* derivative information */
   33:  #include "LCD.H"
   34:  
   35:  static unsigned short OpenFlag=0;
   36:  
   37:  //---------------------wait---------------------
   38:  // time delay
   39:  // Input: time in 5.33 usec
   40:  // Output: none
   41:  void static wait(unsigned short delay){ 
*** EVALUATION ***

Function: wait
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 6cac         [2]     STD   4,-SP
   42:  unsigned short startTime;
   43:    startTime = TCNT;
  0002 dc00         [3]     LDD   _TCNT
  0004 6c82         [2]     STD   2,SP
   44:    while((TCNT-startTime) <= delay){}  
  0006 dc00         [3]     LDD   _TCNT
  0008 a382         [3]     SUBD  2,SP
  000a ac80         [3]     CPD   0,SP
  000c 23f8         [3/1]   BLS   *-6 ;abs = 0006
   45:  }
  000e 1b84         [2]     LEAS  4,SP
  0010 3d           [5]     RTS   
   46:  //---------------------1mswait---------------------
   47:  // time delay
   48:  // Input: time in msec
   49:  // Output: none
   50:  void static wait1ms(unsigned short msec){ 
*** EVALUATION ***

Function: wait1ms
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

   51:    for(;msec;msec--){
  0000 b745         [1]     TFR   D,X
  0002 2008         [3]     BRA   *+10 ;abs = 000c
   52:      wait(188);    // 1ms wait
  0004 c6bc         [1]     LDAB  #188
  0006 87           [1]     CLRA  
  0007 34           [2]     PSHX  
  0008 0700         [4]     BSR   wait
  000a 30           [3]     PULX  
  000b 09           [1]     DEX   
  000c 0475f5       [3]     TBNE  X,*-8 ;abs = 0004
   53:    }
   54:  }
  000f 3d           [5]     RTS   
   55:    
   56:  //---------------------outCsrNibble---------------------
   57:  // sends one command code to the LCD control/status
   58:  // Input: command is 4-bit function to execute
   59:  // Output: none
   60:  static void outCsrNibble(unsigned char command){
*** EVALUATION ***

Function: outCsrNibble
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
   61:    PTH = (PTH&0x80)+(command&0x0F);    // nibble, E=0, RS=0
  0001 f60000       [3]     LDAB  _PTH
  0004 c480         [1]     ANDB  #128
  0006 32           [3]     PULA  
  0007 840f         [1]     ANDA  #15
  0009 1806         [2]     ABA   
  000b 7a0000       [3]     STAA  _PTH
   62:    PTH |= 0x40;             // E goes 0,1
  000e 1c000040     [4]     BSET  _PTH,#64
   63:    asm nop
  0012 a7           [1]     NOP   
   64:    asm nop                  // 5 cycles wide = 208ns
  0013 a7           [1]     NOP   
   65:    PTH &= ~0x40;            // E goes 1,0
  0014 1d000040     [4]     BCLR  _PTH,#64
   66:  }
  0018 3d           [5]     RTS   
   67:  
   68:  //---------------------outCsr---------------------
   69:  // sends one command code to the LCD control/status
   70:  // Input: command is 8-bit function to execute
   71:  // Output: none
   72:  static void outCsr(unsigned char command){
*** EVALUATION ***

Function: outCsr
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
   73:    outCsrNibble(command>>4);   // ms nibble, E=0, RS=0
  0001 54           [1]     LSRB  
  0002 54           [1]     LSRB  
  0003 54           [1]     LSRB  
  0004 54           [1]     LSRB  
  0005 0700         [4]     BSR   outCsrNibble
   74:    outCsrNibble(command);      // ls nibble, E=0, RS=0
  0007 e680         [3]     LDAB  0,SP
  0009 0700         [4]     BSR   outCsrNibble
   75:    wait(135);                  // blind cycle 90 us wait
  000b c687         [1]     LDAB  #135
  000d 87           [1]     CLRA  
  000e 0700         [4]     BSR   wait
   76:  }
  0010 32           [3]     PULA  
  0011 3d           [5]     RTS   
   77:  
   78:  //---------------------LCD_Clear---------------------
   79:  // clear the LCD display, send cursor to home
   80:  // Input: none
   81:  // Output: true if successful
   82:  short LCD_Clear(void){
*** EVALUATION ***

Function: LCD_Clear
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

   83:    if(OpenFlag==0){
  0000 fc0000       [3]     LDD   OpenFlag
  0003 2601         [3/1]   BNE   *+3 ;abs = 0006
   84:      return 0;  // not open
  0005 3d           [5]     RTS   
   85:    }
   86:    outCsr(0x01);        // Clear Display
  0006 c601         [1]     LDAB  #1
  0008 0700         [4]     BSR   outCsr
   87:    wait(2460);          // 1.64ms wait
  000a cc099c       [2]     LDD   #2460
  000d 0700         [4]     BSR   wait
   88:    outCsr(0x02);        // Cursor to home
  000f c602         [1]     LDAB  #2
  0011 0700         [4]     BSR   outCsr
   89:    wait(2460);          // 1.64ms wait
  0013 cc099c       [2]     LDD   #2460
  0016 0700         [4]     BSR   wait
   90:    return 1;		         // success
  0018 c601         [1]     LDAB  #1
  001a 87           [1]     CLRA  
   91:  }
  001b 3d           [5]     RTS   
   92:  #define LCDINC 2
   93:  #define LCDDEC 0
   94:  #define LCDSHIFT 1
   95:  #define LCDNOSHIFT 0
   96:  #define LCDCURSOR 2
   97:  #define LCDNOCURSOR 0
   98:  #define LCDBLINK 1
   99:  #define LCDNOBLINK 0
  100:  #define LCDSCROLL 8
  101:  #define LCDNOSCROLL 0
  102:  #define LCDLEFT 0
  103:  #define LCDRIGHT 4
  104:  #define LCD2LINE 8
  105:  #define LCD1LINE 0
  106:  #define LCD10DOT 4
  107:  #define LCD7DOT 0
  108:  
  109:  //---------------------LCD_Open---------------------
  110:  // initialize the LCD display, called once at beginning
  111:  // Input: none
  112:  // Output: true if successful
  113:  short LCD_Open(void){
*** EVALUATION ***

Function: LCD_Open
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  114:    if(OpenFlag){
  0000 fc0000       [3]     LDD   OpenFlag
  0003 2703         [3/1]   BEQ   *+5 ;abs = 0008
  115:      return 0;      // error if already open
  0005 c7           [1]     CLRB  
  0006 87           [1]     CLRA  
  0007 3d           [5]     RTS   
  116:    }
  117:    DDRH |= 0x7F;    // PH6-0 output to LCD
  0008 1c00007f     [4]     BSET  _DDRH,#127
  118:    PTH &= ~0x20;    // PH5=R/W=0 means write
  000c 1d000020     [4]     BCLR  _PTH,#32
  119:    TSCR1 = 0x80;
  0010 cc0780       [2]     LDD   #1920
  0013 5b00         [2]     STAB  _TSCR1
  120:    TSCR2 = 0x07; 
  0015 5a00         [2]     STAA  _TSCR2
  121:  /* Bottom three bits of TSCR2 (PR2,PR1,PR0) determine TCNT period
  122:      divide  FastMode(24MHz)    Slow Mode (8MHz)
  123:  000   1     42ns  TOF  2.73ms  125ns TOF 8.192ms
  124:  001   2     84ns  TOF  5.46ms  250ns TOF 16.384ms 
  125:  010   4    167ns  TOF  10.9ms  500ns TOF 32.768ms   
  126:  011   8    333ns  TOF  21.8ms 	 1us TOF 65.536ms
  127:  100  16    667ns  TOF  43.7ms 	 2us TOF 131.072ms
  128:  101  32   1.33us  TOF  87.4ms		 4us TOF 262.144ns
  129:  110  64   2.67us  TOF 174.8ms    8us TOF 524.288ms
  130:  111 128   5.33us  TOF 349.5ms   16us TOF 1.048576s */ 
  131:  // Be careful, TSCR1 and TSCR2 maybe set in other rituals
  132:    wait1ms(20);        // to allow LCD powerup
  0017 c614         [1]     LDAB  #20
  0019 87           [1]     CLRA  
  001a 0700         [4]     BSR   wait1ms
  133:    outCsrNibble(0x03); // (DL=1 8-bit mode)
  001c c603         [1]     LDAB  #3
  001e 0700         [4]     BSR   outCsrNibble
  134:    wait1ms(5);         //  blind cycle 5ms wait
  0020 c605         [1]     LDAB  #5
  0022 87           [1]     CLRA  
  0023 0700         [4]     BSR   wait1ms
  135:    outCsrNibble(0x03); // (DL=1 8-bit mode)
  0025 c603         [1]     LDAB  #3
  0027 0700         [4]     BSR   outCsrNibble
  136:    wait(150);          // blind cycle 100us wait
  0029 c696         [1]     LDAB  #150
  002b 87           [1]     CLRA  
  002c 160000       [4]     JSR   wait
  137:    outCsrNibble(0x03); // (DL=1 8-bit mode)
  002f c603         [1]     LDAB  #3
  0031 071b         [4]     BSR   *+29 ;abs = 004e
  138:    wait(150);          //  blind cycle 100us wait (not called for, but do it anyway)
  139:    outCsrNibble(0x02); // (DL=0 4-bit mode)
  0033 c602         [1]     LDAB  #2
  0035 0717         [4]     BSR   *+25 ;abs = 004e
  140:    wait(150);          // blind cycle 100 us wait
  141:  /* Entry Mode Set 0,0,0,0,0,1,I/D,S
  142:       I/D=1 for increment cursor move direction
  143:          =0 for decrement cursor move direction
  144:       S  =1 for display shift
  145:          =0 for no display shift	 */
  146:    outCsr(0x04+LCDINC+LCDNOSHIFT);        // I/D=1 Increment, S=0 no displayshift
  0037 c606         [1]     LDAB  #6
  0039 0700         [4]     BSR   outCsr
  147:  /* Display On/Off Control 0,0,0,0,1,D,C,B
  148:       D  =1 for display on
  149:          =0 for display off
  150:       C  =1 for cursor on
  151:          =0 for cursor off
  152:       B  =1 for blink of cursor position character
  153:          =0 for no blink	 */
  154:    outCsr(0x0C+LCDNOCURSOR+LCDNOBLINK);   // D=1 displayon, C=0 cursoroff, B=0 blink off
  003b c60c         [1]     LDAB  #12
  003d 0700         [4]     BSR   outCsr
  155:  /* Cursor/Display Shift  0,0,0,1,S/C,R/L,*,*
  156:       S/C=1 for display shift
  157:          =0 for cursor movement
  158:       R/L=1 for shift to left
  159:          =0 for shift to right	 */
  160:    outCsr(0x10+LCDNOSCROLL+LCDRIGHT);   // S/C=0 cursormove, R/L=1 shiftright
  003f c614         [1]     LDAB  #20
  0041 0700         [4]     BSR   outCsr
  161:  /* Function Set   0,0,1,DL,N,F,*,*
  162:       DL=1 for 8 bit
  163:         =0 for 4 bit
  164:       N =1 for 2 lines
  165:         =0 for 1 line
  166:       F =1 for 5 by 10 dots
  167:         =0 for 5 by 7 dots */
  168:    outCsr(0x20+LCD2LINE+LCD7DOT);   // DL=0 4bit, N=1 2 line, F=0 5by7 dots
  0043 c628         [1]     LDAB  #40
  0045 0700         [4]     BSR   outCsr
  169:    OpenFlag = 1;         // device open
  0047 c601         [1]     LDAB  #1
  0049 87           [1]     CLRA  
  004a 7c0000       [3]     STD   OpenFlag
  170:    return 1;   // clear display
  171:  }
  004d 3d           [5]     RTS   
  004e 160000       [4]     JSR   outCsrNibble
  0051 c696         [1]     LDAB  #150
  0053 87           [1]     CLRA  
  0054 060000       [3]     JMP   wait
  172:  
  173:  //---------------------LCD_OutChar---------------------
  174:  // sends one ASCII to the LCD display
  175:  // Input: letter is ASCII code
  176:  // Output: true if successful
  177:  short LCD_OutChar(unsigned char letter){
*** EVALUATION ***

Function: LCD_OutChar
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
  178:    if(OpenFlag==0){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 2602         [3/1]   BNE   *+4 ;abs = 0008
  179:      return 0;  // not open
  0006 202d         [3]     BRA   *+47 ;abs = 0035
  180:    }
  181:    PTH = (PTH&0x80)+(0x10+(0x0F&(letter>>4)));   // ms nibble, E=0, RS=1
  0008 f60000       [3]     LDAB  _PTH
  000b c480         [1]     ANDB  #128
  000d a680         [3]     LDAA  0,SP
  000f 44           [1]     LSRA  
  0010 44           [1]     LSRA  
  0011 44           [1]     LSRA  
  0012 44           [1]     LSRA  
  0013 0723         [4]     BSR   *+37 ;abs = 0038
  182:    PTH |= 0x40;       // E goes 0,1
  183:    asm nop
  0015 a7           [1]     NOP   
  184:    asm nop            // 5 cycles wide = 208ns
  0016 a7           [1]     NOP   
  185:    PTH &= ~0x40;      // E goes 1,0
  0017 1d000040     [4]     BCLR  _PTH,#64
  186:    PTH = (PTH&0x80)+(0x10+(letter&0x0F));        // ls nibble, E=0, RS=1
  001b f60000       [3]     LDAB  _PTH
  001e c480         [1]     ANDB  #128
  0020 a680         [3]     LDAA  0,SP
  0022 840f         [1]     ANDA  #15
  0024 0712         [4]     BSR   *+20 ;abs = 0038
  187:    PTH |= 0x40;       // E goes 0,1
  188:    asm nop
  0026 a7           [1]     NOP   
  189:    asm nop            // 5 cycles wide = 208ns
  0027 a7           [1]     NOP   
  190:    PTH &= ~0x40;      // E goes 1,0
  0028 1d000040     [4]     BCLR  _PTH,#64
  191:    wait(135);         // 90 us wait
  002c c687         [1]     LDAB  #135
  002e 87           [1]     CLRA  
  002f 160000       [4]     JSR   wait
  192:    return 1;	         // success
  0032 c601         [1]     LDAB  #1
  0034 87           [1]     CLRA  
  193:  }
  0035 1b81         [2]     LEAS  1,SP
  0037 3d           [5]     RTS   
  0038 8b10         [1]     ADDA  #16
  003a 1806         [2]     ABA   
  003c 7a0000       [3]     STAA  _PTH
  003f 1c000040     [4]     BSET  _PTH,#64
  0043 3d           [5]     RTS   
  194:  
  195:  //---------------------LCD_OutString--------------
  196:  // Display String
  197:  // Input: pointer to NULL-terminationed ASCII string 
  198:  // Output: true if successful
  199:  short LCD_OutString(char *pt){ 
*** EVALUATION ***

Function: LCD_OutString
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 3b           [2]     PSHD  
  200:    if(OpenFlag==0){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 260f         [3/1]   BNE   *+17 ;abs = 0015
  201:      return 0;  // not open
  0006 2005         [3]     BRA   *+7 ;abs = 000d
  202:    }
  203:    while(*pt){
  204:      if(LCD_OutChar((unsigned char)*pt)==0){
  0008 0700         [4]     BSR   LCD_OutChar
  000a 046403       [3]     TBNE  D,*+6 ;abs = 0010
  205:        return 0;
  000d c7           [1]     CLRB  
  000e 200d         [3]     BRA   *+15 ;abs = 001d
  206:      }
  207:      pt++;
  0010 ee80         [3]     LDX   0,SP
  0012 08           [1]     INX   
  0013 6e80         [2]     STX   0,SP
  0015 ee80         [3]     LDX   0,SP
  0017 e600         [3]     LDAB  0,X
  0019 26ed         [3/1]   BNE   *-17 ;abs = 0008
  208:    }
  209:    return 1;	  // success
  001b c601         [1]     LDAB  #1
  001d 87           [1]     CLRA  
  210:  }
  001e 30           [3]     PULX  
  001f 3d           [5]     RTS   
  211:  
  212:  //---------------------LCD_GoTo--------------
  213:  // Move the cursor to a particular row and column
  214:  // Input: Parameters (row, column)   First row and and column is 0
  215:  // Output: Sets internal error code if failure occurs
  216:  // Returns: None
  217:  short LCD_GoTo(unsigned char row, unsigned char col){
*** EVALUATION ***

Function: LCD_GoTo
Source  : C:\Users\Raz\Documents\EE 445L\Lab10\Sources\lcd.c
Options : -Cc -CPUHCS12 -D_HCS12_SERIALMON -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Raz\Documents\EE 445L\Lab10;C:\Users\Raz\Documents\EE 445L\Lab10\bin;C:\Users\Raz\Documents\EE 445L\Lab10\prm;C:\Users\Raz\Documents\EE 445L\Lab10\cmd;C:\Users\Raz\Documents\EE 445L\Lab10\Sources;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Env"TEXTPATH=C:\Users\Raz\Documents\EE 445L\Lab10\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Raz\Documents\EE 445L\Lab10\Lab10_Data\Standard\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
  218:    //int i;
  219:    if(OpenFlag==0 || col > 7 || row > 1){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 270c         [3/1]   BEQ   *+14 ;abs = 0012
  0006 e680         [3]     LDAB  0,SP
  0008 c107         [1]     CMPB  #7
  000a 2206         [3/1]   BHI   *+8 ;abs = 0012
  000c a683         [3]     LDAA  3,SP
  000e 8101         [1]     CMPA  #1
  0010 2303         [3/1]   BLS   *+5 ;abs = 0015
  220:      return 0;
  0012 c7           [1]     CLRB  
  0013 200d         [3]     BRA   *+15 ;abs = 0022
  221:    }
  222:    if(row) {
  0015 044003       [3]     TBEQ  A,*+6 ;abs = 001b
  223:      outCsr(0xC0 + col); // Jump to second 8 characters then to correct column
  0018 cbc0         [1]     ADDB  #192
  224:    }
  001a 8f           [2]     SKIP2 
  225:    else {
  226:      outCsr(0x80 + col); // Jump to correct column
  001b cb80         [1]     ADDB  #128
  001d 160000       [4]     JSR   outCsr
  227:    }
  228:    return 1;
  0020 c601         [1]     LDAB  #1
  0022 87           [1]     CLRA  
  229:  }
  0023 1b81         [2]     LEAS  1,SP
  0025 3d           [5]     RTS   
  230:  
  231:  
  232:  
